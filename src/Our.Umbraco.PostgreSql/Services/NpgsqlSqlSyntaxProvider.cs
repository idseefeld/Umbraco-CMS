// Don't remove the unused System using, for some reason this breaks docfx, and I have no clue why.
using System.Data;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using NPoco;
using Our.Umbraco.PostgreSql;
using Umbraco.Cms.Core;
using Umbraco.Cms.Core.Persistence;
using Umbraco.Cms.Infrastructure.Persistence;
using Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations;
using Umbraco.Cms.Infrastructure.Persistence.DatabaseModelDefinitions;
using Umbraco.Cms.Infrastructure.Persistence.SqlSyntax;
using Umbraco.Extensions;
using ColumnInfo = Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ColumnInfo;
using UCC = Umbraco.Cms.Core;


namespace Our.Umbraco.PostgreSql.Services;

/// <summary>
///     Abstract class for defining PostgreSQL / Npgsql implementations
/// </summary>
/// <remarks>
///     All Sql Syntax provider implementations should derive from this abstract class.
/// </remarks>
/// <typeparam name="TSyntax"></typeparam>
public class NpgsqlSqlSyntaxProvider<TSyntax> : SqlSyntaxProviderBase<TSyntax>
    where TSyntax : ISqlSyntaxProvider
{
    /// <inheritdoc />
    public NpgsqlSqlSyntaxProvider()
    {
        ClauseOrder = new List<Func<ColumnDefinition, string>>
        {
            FormatString,
            FormatType,
            FormatNullable,
            FormatConstraint,
            FormatDefaultValue,
            FormatPrimaryKey,
            FormatIdentity
        };

        StringLengthColumnDefinitionFormat = StringLengthUnicodeColumnDefinitionFormat;
        StringColumnDefinition = string.Format(StringLengthColumnDefinitionFormat, DefaultStringLength);
        DecimalColumnDefinition =
            string.Format(DecimalColumnDefinitionFormat, DefaultDecimalPrecision, DefaultDecimalScale);

        var col = Regex.Escape(GetQuotedColumnName("column")).Replace("column", @"\w+");
        var fld = Regex.Escape(GetQuotedTableName("table") + ".").Replace("table", @"\w+") + col;
        AliasRegex = new Regex(
            "(" + fld + @")\s+AS\s+(" + col + ")",
            RegexOptions.Multiline | RegexOptions.Singleline | RegexOptions.IgnoreCase | RegexOptions.Compiled);

        AutoIncrementDefinition = "GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 )"; // "SERIAL"
        AutoIncrementLongDefinition = "GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 )"; // "BIGSERIAL"

        IntColumnDefinition = "INTEGER";
        LongColumnDefinition = "BIGINT";
        GuidColumnDefinition = "UUID";
        BoolColumnDefinition = "BOOLEAN";
        RealColumnDefinition = "DOUBLE PRECISION";
        DecimalColumnDefinition = "NUMERIC(20,9)";
        BlobColumnDefinition = "BYTEA";
        DateTimeColumnDefinition = "TIMESTAMP";
        DateTimeOffsetColumnDefinition = "TIMESTAMP"; // "TIMESTAMPTZ";
        TimeColumnDefinition = "TIME";
    }

    /// <inheritdoc />
    public override string ProviderName => Constants.ProviderName;

    /// <inheritdoc />
    public override string DbProvider => Constants.ProviderName;
    public override IsolationLevel DefaultIsolationLevel => IsolationLevel.ReadCommitted;

    /// <inheritdoc />

    public new string StringLengthNonUnicodeColumnDefinitionFormat { get; } = "VARCHAR({0})";

    /// <inheritdoc />
    public override string StringLengthUnicodeColumnDefinitionFormat { get; } = "NATIONAL CHARACTER VARYING({0})";


    /// <inheritdoc />
    public new string DecimalColumnDefinitionFormat { get; } = "NUMERIC({0},{1})";

    /// <inheritdoc />
    public new string DefaultValueFormat { get; } = "DEFAULT {0}";

    /// <inheritdoc />
    public new int DefaultStringLength { get; } = 255;

    /// <inheritdoc />
    public new int DefaultDecimalPrecision { get; } = 20;

    /// <inheritdoc />
    public new int DefaultDecimalScale { get; } = 9;

    /// <inheritdoc />
    public new string StringColumnDefinition { get; } = "TEXT";

    /// <inheritdoc />
    public new string StringLengthColumnDefinitionFormat { get; } = "TEXT";

    public string AutoIncrementLongDefinition { get; protected set; } = "AUTOINCREMENT";
    protected new IList<Func<ColumnDefinition, string>> ClauseOrder { get; }

    /// <inheritdoc />
    public new Regex AliasRegex { get; }

    /// <inheritdoc />
    public override string CreateForeignKeyConstraint => "ALTER TABLE {0} ADD CONSTRAINT {1} FOREIGN KEY ({2}) REFERENCES {3} ({4}){5}{6}";

    /// <inheritdoc />
    public override string CreateDefaultConstraint => "ALTER TABLE {0} ALTER COLUMN {3} SET DEFAULT {2}";

    /// <inheritdoc />
    public new string GetWildcardPlaceholder() => "%";

    /// <inheritdoc />
    public override DatabaseType GetUpdatedDatabaseType(DatabaseType current, string? connectionString) => current;

    /// <inheritdoc />
    public override string OrderByGuid(string tableName, string columnName) => $"UPPER({GetQuotedColumn(tableName, columnName)}::text)";

    /// <inheritdoc />
    private string GetQuotedColumn(string tableName, string columnName) => GetQuotedTableName(tableName) + "." + GetQuotedColumnName(columnName);

    /// <inheritdoc />
    public override string GetStringColumnEqualComparison(string column, int paramIndex, TextColumnType columnType)
    {
        return $"UPPER({column}::text) = UPPER(@{paramIndex})";
    }

    /// <inheritdoc />
    public override string GetStringColumnWildcardComparison(string column, int paramIndex, TextColumnType columnType)
    {
        return $"UPPER({column}::text) LIKE UPPER(@{paramIndex})";
    }

    /// <inheritdoc />
    public override string GetConcat(params string[] args) => string.Join(" || ", args);

    /// <inheritdoc />
    public override string GetQuotedTableName(string? tableName) => $"\"{tableName}\""; // tableName != null ? tableName.ToLower() : string.Empty;

    /// <inheritdoc />
    public override string GetQuotedColumnName(string? columnName) => $"\"{columnName}\""; // columnName != null ? columnName.ToLower() : string.Empty;

    /// <inheritdoc />
    public override string GetQuotedName(string? name) => $"\"{name}\"";// name != null ? name.ToLower() : string.Empty;//

    /// <inheritdoc />
    public override string GetQuotedValue(string value) => $"'{value.Replace("'", "''")}'";

    /// <inheritdoc />
    public override string GetIndexType(IndexTypes indexTypes)
    {
        switch (indexTypes)
        {
            case IndexTypes.UniqueNonClustered:
            case IndexTypes.UniqueClustered:
                return "UNIQUE";
            default:
                return string.Empty;
        }
    }

    /// <inheritdoc />
    public override string GetSpecialDbType(SpecialDbType dbType)
    {
        if (dbType == SpecialDbType.NCHAR)
        {
            return "CHAR";
        }

        return "TEXT";
    }

    /// <inheritdoc />
    public override string GetColumn(DatabaseType dbType, string tableName, string columnName, string? columnAlias, string? referenceName = null, bool forInsert = false)
    {
        tableName = GetQuotedTableName(tableName);
        columnName = GetQuotedColumnName(columnName);
        var column = forInsert ? columnName : tableName + "." + columnName;
        if (columnAlias == null)
        {
            return column;
        }

        referenceName = referenceName == null ? string.Empty : referenceName + "__";
        columnAlias = GetQuotedColumnName(referenceName + columnAlias);
        column += " AS " + columnAlias;
        return column;
    }

    /// <inheritdoc />
    public override IEnumerable<string> GetTablesInSchema(IDatabase db)
    {
        List<string> rVal = db.Fetch<string>("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'");
        return rVal;
    }

    /// <inheritdoc />
    public override IEnumerable<ColumnInfo> GetColumnsInSchema(IDatabase db)
    {
        const string sql = @"
            SELECT
                table_name AS ""TableName"",
                column_name AS ""ColumnName"",
                ordinal_position AS ""Ordinal"",
                column_default AS ""ColumnDefault"",
                is_nullable = 'YES' AS ""IsNullable"",
                data_type AS ""DataType""
              FROM information_schema.columns
              WHERE table_schema = 'public'";

        return db.Fetch<ColumnInfo>(sql);
    }

    /// <inheritdoc />
    public override IEnumerable<Tuple<string, string>> GetConstraintsPerTable(IDatabase db)
    {
        const string sql = @"
        SELECT
            tc.table_name AS ""TableName"",
            tc.constraint_name AS ""ColumnName""
        FROM information_schema.table_constraints tc
        WHERE tc.table_schema = 'public'";

        List<ConstraintsPerColumn> temp = db.Fetch<ConstraintsPerColumn>(sql);
        var rVal = temp.Select(x => new Tuple<string, string>(x.TableName, x.ConstraintName)).ToList();
        return rVal;
    }

    /// <inheritdoc />
    public override IEnumerable<Tuple<string, string, string>> GetConstraintsPerColumn(IDatabase db)
    {
        const string sql = @"
        SELECT
            tc.table_name AS ""TableName"",
            kcu.column_name AS ""ColumnName"",
            tc.constraint_name AS ""ConstraintName""
        FROM
            information_schema.table_constraints AS tc
            JOIN information_schema.key_column_usage AS kcu
                ON tc.constraint_name = kcu.constraint_name
                AND tc.table_schema = kcu.table_schema
        WHERE
            tc.table_schema = 'public'
        UNION
        SELECT
            tc.table_name,
            ccu.column_name,
            tc.constraint_name
        FROM
            information_schema.table_constraints AS tc
            JOIN information_schema.constraint_column_usage AS ccu
                ON tc.constraint_name = ccu.constraint_name
                AND tc.table_schema = ccu.table_schema
        WHERE
            tc.table_schema = 'public'
            AND tc.constraint_type = 'CHECK'
    ";

        List<ConstraintsPerColumn> temp = db.Fetch<ConstraintsPerColumn>(sql);
        var rVal = temp.Select(x => new Tuple<string, string, string>(x.TableName, x.ColumnName, x.ConstraintName)).ToList();
        return rVal;
    }

    /// <inheritdoc />
    public override bool DoesPrimaryKeyExist(IDatabase db, string tableName, string primaryKeyName)
    {
        var result = db.ExecuteScalar<int>(
            @"SELECT COUNT(*)
              FROM information_schema.table_constraints
              WHERE table_name = @0 AND constraint_type = 'PRIMARY KEY' AND constraint_name = @1",
            tableName, primaryKeyName);
        return result > 0;
    }

    /// <inheritdoc />
    public override string GetFieldNameForUpdate<TDto>(Expression<Func<TDto, object?>> fieldSelector, string? tableAlias = null)
    {
        PropertyInfo field = ExpressionHelper.FindProperty(fieldSelector).Item1 as PropertyInfo
            ?? throw new ArgumentNullException(nameof(fieldSelector), "Field selector must return a valid property.");

        ColumnAttribute? attr = field?.FirstAttribute<ColumnAttribute>();
        var fieldName = string.IsNullOrWhiteSpace(attr?.Name) ? field?.Name : attr.Name;

        return GetQuotedColumnName(fieldName);
    }

    /// <inheritdoc />
    public override Sql<ISqlContext> InsertForUpdateHint(Sql<ISqlContext> sql) => sql;

    /// <inheritdoc />
    public override Sql<ISqlContext> AppendForUpdateHint(Sql<ISqlContext> sql) => sql;

    /// <inheritdoc />
    public override IDictionary<Type, IScalarMapper>? ScalarMappers => null;

    /// <inheritdoc />
    public override bool DoesTableExist(IDatabase db, string tableName) => GetTablesInSchema(db).Contains(tableName);

    /// <inheritdoc />
    public override bool SupportsClustered() => false; // PostgreSQL does not support clustered indexes
    public override bool SupportsIdentityInsert() => false; // PostgreSQL does not support identity insert

    /// <inheritdoc />
    public override string FormatDateTime(DateTime date, bool includeTime = true)
    {
        return date.ToString(includeTime ? "yyyy-MM-dd HH:mm:ss" : "yyyy-MM-dd", CultureInfo.InvariantCulture);
    }

    /// <inheritdoc />
    public override string Format(TableDefinition table)
    {
        var statement = string.Format(CreateTable, GetQuotedTableName(table.Name), Format(table.Columns));
        return statement;
    }

    /// <inheritdoc />
    public override string ConvertIntegerToBoolean(int value) => value == 0 ? "false" : "true";

    /// <inheritdoc />
    public override List<string> Format(IEnumerable<IndexDefinition> indexes) => indexes.Select(Format).ToList();

    /// <inheritdoc />
    public override string Format(IndexDefinition index)
    {
        var name = string.IsNullOrEmpty(index.Name)
            ? $"IX_{index.TableName}_{index.ColumnName}"
            : index.Name;

        var columns = index.Columns.Any()
            ? string.Join(",", index.Columns.Select(x => GetQuotedColumnName(x.Name)))
            : GetQuotedColumnName(index.ColumnName);

        return string.Format(
            CreateIndex,
            GetIndexType(index.IndexType),
            " ",
            GetQuotedName(name),
            GetQuotedTableName(index.TableName),
            columns);
    }

    /// <inheritdoc />
    public override List<string> Format(IEnumerable<ForeignKeyDefinition> foreignKeys) =>
        foreignKeys.Select(Format).ToList();

    /// <inheritdoc />
    public override string Format(ForeignKeyDefinition foreignKey)
    {
        var constraintName = string.IsNullOrEmpty(foreignKey.Name)
            ? $"FK_{foreignKey.ForeignTable}_{foreignKey.PrimaryTable}_{foreignKey.PrimaryColumns.First()}"
            : foreignKey.Name;

        return string.Format(
            CreateForeignKeyConstraint,
            GetQuotedTableName(foreignKey.ForeignTable),
            GetQuotedName(constraintName),
            GetQuotedColumnName(foreignKey.ForeignColumns.First()),
            GetQuotedTableName(foreignKey.PrimaryTable),
            GetQuotedColumnName(foreignKey.PrimaryColumns.First()),
            FormatCascade("DELETE", foreignKey.OnDelete),
            FormatCascade("UPDATE", foreignKey.OnUpdate));
    }

    public override string Format(IEnumerable<ColumnDefinition> columns)
    {
        var sb = new StringBuilder();
        foreach (ColumnDefinition column in columns)
        {
            sb.Append(Format(column) + ",\n");
        }
        return sb.ToString().TrimEnd(",\n");
    }

    public override string Format(ColumnDefinition column) =>
        string.Join(" ", ClauseOrder
            .Select(action => action(column))
            .Where(clause => string.IsNullOrEmpty(clause) == false));

    public override string Format(ColumnDefinition column, string tableName, out IEnumerable<string> sqls)
    {
        var sql = new StringBuilder();
        sql.Append(FormatString(column));
        sql.Append(" ");
        sql.Append(FormatType(column));
        sql.Append(" ");
        sql.Append("NULL"); // always nullable
        sql.Append(" ");
        sql.Append(FormatConstraint(column));
        sql.Append(" ");
        sql.Append(FormatDefaultValue(column));
        sql.Append(" ");
        sql.Append(FormatPrimaryKey(column));
        sql.Append(" ");
        sql.Append(FormatIdentity(column));

        var msql = new List<string>();
        sqls = msql;

        var alterSql = new StringBuilder();
        alterSql.Append(FormatString(column));
        alterSql.Append(" ");
        alterSql.Append(FormatType(column));
        alterSql.Append(" ");
        alterSql.Append(FormatNullable(column));
        msql.Add(string.Format(AlterColumn, tableName, alterSql));

        return sql.ToString();
    }

    public override string FormatPrimaryKey(TableDefinition table)
    {
        ColumnDefinition? columnDefinition = table.Columns.FirstOrDefault(x => x.IsPrimaryKey);
        if (columnDefinition == null)
        {
            return string.Empty;
        }

        var constraintName = string.IsNullOrEmpty(columnDefinition.PrimaryKeyName)
            ? $"PK_{table.Name}"
            : columnDefinition.PrimaryKeyName;

        var columns = string.IsNullOrEmpty(columnDefinition.PrimaryKeyColumns)
            ? GetQuotedColumnName(columnDefinition.Name)
            : string.Join(", ", columnDefinition.PrimaryKeyColumns
                .Split(UCC.Constants.CharArrays.CommaSpace, StringSplitOptions.RemoveEmptyEntries)
                .Select(GetQuotedColumnName));

        return string.Format(
            CreateConstraint,
            GetQuotedTableName(table.Name),
            GetQuotedName(constraintName),
            "PRIMARY KEY",
            columns);
    }

    public override string FormatColumnRename(string? tableName, string? oldName, string? newName) =>
        string.Format(
            RenameColumn,
            GetQuotedTableName(tableName),
            GetQuotedColumnName(oldName),
            GetQuotedColumnName(newName));

    public override string FormatTableRename(string? oldName, string? newName) =>
        string.Format(RenameTable, GetQuotedTableName(oldName), GetQuotedTableName(newName));

    public override string DeleteDefaultConstraint =>
        throw new NotSupportedException("Default constraints are not supported in PostgreSQL");

    public override string Length => "LENGTH";
    public override string Substring => "SUBSTRING";

    public override string CreateTable => "CREATE TABLE {0} ({1})";
    public override string DropTable => "DROP TABLE {0} CASCADE";
    public override string AddColumn => "ALTER TABLE {0} ADD COLUMN {1}";
    public override string DropColumn => "ALTER TABLE {0} DROP COLUMN {1} CASCADE";
    public override string AlterColumn => "ALTER TABLE {0} ALTER COLUMN {1} TYPE {2}";
    public override string RenameColumn => "ALTER TABLE {0} RENAME COLUMN {1} TO {2}";
    public override string RenameTable => "ALTER TABLE {0} RENAME TO {1}";
    public override string CreateSchema => "CREATE SCHEMA {0}";
    public override string AlterSchema => "ALTER SCHEMA {0} TRANSFER {1}.{2}";
    public override string DropSchema => "DROP SCHEMA {0} CASCADE";
    public override string CreateIndex => "CREATE {0} INDEX {2} ON {3} ({4})";
    public override string DropIndex => "DROP INDEX {0} CASCADE";
    public override string InsertData => "INSERT INTO {0} ({1}) VALUES ({2})";
    public override string UpdateData => "UPDATE {0} SET {1} WHERE {2}";
    public override string DeleteData => "DELETE FROM {0} WHERE {1}";
    public override string TruncateTable => "TRUNCATE TABLE {0} CASCADE";
    public override string CreateConstraint => "CONSTRAINT {1} {2} ({3})"; // "ALTER TABLE {0} ADD CONSTRAINT {1} {2} ({3})";
    public override string DeleteConstraint => "ALTER TABLE {0} DROP CONSTRAINT {1} CASCADE";
    public override string ConvertIntegerToOrderableString => "LPAD(CAST({0} AS TEXT), 8, '0')";
    public override string ConvertDateToOrderableString => "TO_CHAR({0}, 'YYYYMMDDHH24MISS')";
    public override string ConvertDecimalToOrderableString => "LPAD(REPLACE(CAST({0} AS TEXT), '.', ''), 20, '0')";
    public override string ConvertUniqueIdentifierToString => "CAST({0} AS NATIONAL CHARACTER VARYING(36))";

    public override string GetSpecialDbType(SpecialDbType dbType, int customSize) =>
        $"{GetSpecialDbType(dbType)}({customSize})";

    protected override string FormatCascade(string onWhat, Rule rule)
    {
        var action = "NO ACTION";
        switch (rule)
        {
            case Rule.None:
                return string.Empty;
            case Rule.Cascade:
                action = "CASCADE";
                break;
            case Rule.SetNull:
                action = "SET NULL";
                break;
            case Rule.SetDefault:
                action = "SET DEFAULT";
                break;
        }
        return $" ON {onWhat} {action}";
    }

    protected override string FormatString(ColumnDefinition column) => GetQuotedColumnName(column.Name);

    protected override string FormatType(ColumnDefinition column)
    {
        if (column.Type.HasValue == false && string.IsNullOrEmpty(column.CustomType) == false)
        {
            return column.CustomType;
        }

        if (column.CustomDbType.HasValue)
        {
            if (column.Size != default)
            {
                return GetSpecialDbType(column.CustomDbType.Value, column.Size);
            }
            return GetSpecialDbType(column.CustomDbType.Value);
        }

        Type type = column.Type.HasValue
            ? DbTypeMap.ColumnDbTypeMap.First(x => x.Value == column.Type.Value).Key
            : column.PropertyType;

        if (type == typeof(string))
        {
            var valueOrDefault = column.Size != default ? column.Size : DefaultStringLength;
            return string.Format(StringLengthColumnDefinitionFormat, valueOrDefault);
        }

        if (type == typeof(decimal))
        {
            var precision = column.Size != default ? column.Size : DefaultDecimalPrecision;
            var scale = column.Precision != default ? column.Precision : DefaultDecimalScale;
            return string.Format(DecimalColumnDefinitionFormat, precision, scale);
        }

        var definition = DbTypeMap.ColumnTypeMap[type];
        var dbTypeDefinition = column.Size != default
            ? $"{definition}({column.Size})"
            : definition;
        return dbTypeDefinition;
    }

    protected override string FormatNullable(ColumnDefinition column) => column.IsNullable ? "NULL" : "NOT NULL";

    protected override string FormatConstraint(ColumnDefinition column)
    {
        if (string.IsNullOrEmpty(column.ConstraintName) && column.DefaultValue == null)
        {
            return string.Empty;
        }
        return
            $"CONSTRAINT {(string.IsNullOrEmpty(column.ConstraintName) ? GetQuotedName($"DF_{column.TableName}_{column.Name}") : column.ConstraintName)}";
    }

    protected override string FormatDefaultValue(ColumnDefinition column)
    {
        if (column.DefaultValue == null)
        {
            return string.Empty;
        }
        if (string.Equals(column.DefaultValue.ToString(), "NOW()", StringComparison.OrdinalIgnoreCase))
        {
            column.DefaultValue = SystemMethods.CurrentDateTime;
        }
        if (column.DefaultValue is SystemMethods)
        {
            var method = FormatSystemMethods((SystemMethods)column.DefaultValue);
            return string.IsNullOrEmpty(method) ? string.Empty : string.Format(DefaultValueFormat, method);
        }
        return string.Format(DefaultValueFormat, GetQuotedValue(column.DefaultValue.ToString()!));
    }

    protected override string FormatPrimaryKey(ColumnDefinition column) => string.Empty;

    protected override string? FormatSystemMethods(SystemMethods systemMethod)
    {
        // Map Umbraco's SystemMethods to PostgreSQL expressions.
        return systemMethod switch
        {
            SystemMethods.CurrentUTCDateTime => "timezone('utc'::text, now())",
            SystemMethods.CurrentDateTime => "timezone('utc'::text, now())",
            SystemMethods.NewGuid => "gen_random_uuid()", // Requires pgcrypto extension; otherwise use uuid_generate_v4()
            _ => null
        };
    }

    protected override string FormatIdentity(ColumnDefinition column)
    {
        // For PostgreSQL, use SERIAL for auto-increment integer columns.
        // If the column is an identity/auto-increment, return the SERIAL keyword.
        // Otherwise, return an empty string.
        if (column.IsIdentity)
        {
            // Use BIGSERIAL for long/bigint, SERIAL for int
            var type = column.Type.HasValue
                ? DbTypeMap.ColumnDbTypeMap.First(x => x.Value == column.Type.Value).Key
                : column.PropertyType;

            if (type == typeof(long))
                return AutoIncrementLongDefinition;
            return AutoIncrementDefinition;
        }
        return string.Empty;
    }

    public override Sql<ISqlContext>.SqlJoinClause<ISqlContext> LeftJoinWithNestedJoin<TDto>(
        Sql<ISqlContext> sql,
        Func<Sql<ISqlContext>, Sql<ISqlContext>> nestedJoin,
        string? alias = null)
    {
        Type type = typeof(TDto);

        var tableName = GetQuotedTableName(type.GetTableName());
        var join = tableName;

        if (alias != null)
        {
            var quotedAlias = GetQuotedTableName(alias);
            join += " " + quotedAlias;
        }

        var nestedSql = new Sql<ISqlContext>(sql.SqlContext);
        nestedSql = nestedJoin(nestedSql);

        Sql<ISqlContext>.SqlJoinClause<ISqlContext> sqlJoin = sql.LeftJoin(join);
        sql.Append(nestedSql);
        return sqlJoin;
    }

    public override Sql<ISqlContext> SelectTop(Sql<ISqlContext> sql, int top)
    {
        // PostgreSQL uses LIMIT at the  end of the select sql as opposed to TOP
        // SELECT TOP 5 * FROM My_Table
        // SELECT * FROM My_Table LIMIT 5;
        return sql.Append($"LIMIT {top}");
    }

    #region implementation for abstract methods from SqlSyntaxProviderBase

    public override IEnumerable<Tuple<string, string, string, bool>> GetDefinedIndexes(IDatabase db)
    {
        // This query returns: TableName, IndexName, ColumnName, IsUnique (excluding primary keys)
        const string sql = @"
            SELECT
                t.relname AS tablename,
                i.relname AS indexname,
                a.attname AS columnname,
                ix.indisunique AS isunique
            FROM
                pg_class t
                INNER JOIN pg_index ix ON t.oid = ix.indrelid
                INNER JOIN pg_class i ON i.oid = ix.indexrelid
                INNER JOIN pg_namespace n ON n.oid = t.relnamespace
                LEFT JOIN pg_attribute a ON a.attrelid = t.oid AND a.attnum = ANY(ix.indkey)
            WHERE
                n.nspname = 'public'
                AND NOT ix.indisprimary
                AND i.relkind = 'i'
            ORDER BY
                t.relname, i.relname, a.attnum;
        ";

        // Map the result to the expected tuple
        var result = db.Fetch<dynamic>(sql);
        foreach (var row in result)
        {
            yield return new Tuple<string, string, string, bool>(
                (string)row.tablename,
                (string)row.indexname,
                (string)row.columnname,
                (bool)row.isunique
            );
        }
    }

    public override bool TryGetDefaultConstraint(IDatabase db, string? tableName, string columnName, [MaybeNullWhen(false)] out string constraintName)
    {
        if (string.IsNullOrEmpty(tableName))
        {
            constraintName = null;
            return false;
        }

        // Query the default value for the column from information_schema
        const string sql = @"
            SELECT column_default
            FROM information_schema.columns
            WHERE table_schema = 'public'
              AND table_name = @0
              AND column_name = @1
            LIMIT 1;
        ";

        constraintName = null;
        var defaultValue = db.ExecuteScalar<string>(sql, tableName, columnName);

        if (!string.IsNullOrEmpty(defaultValue))
        {
            // PostgreSQL does not have a constraint name, but we can return the default expression
            constraintName = defaultValue;
            return true;
        }

        return false;
    }

    public override void HandleCreateTable(IDatabase database, TableDefinition tableDefinition, bool skipKeysAndIndexes = false) { }

    private class ConstraintsPerColumn
    {
        public string TableName { get; set; } = string.Empty;
        public string ColumnName { get; set; } = string.Empty;
        public string ConstraintName { get; set; } = string.Empty;
    }

    #endregion implementation for abstract methods from SqlSyntaxProviderBase
}
